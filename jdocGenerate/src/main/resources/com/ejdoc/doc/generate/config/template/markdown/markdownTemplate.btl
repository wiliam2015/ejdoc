<% if(isNotEmpty(prop.interfaceClass) && prop.interfaceClass){
     print("# 接口名称:");
}else if(isNotEmpty(prop.abstractClass) && prop.abstractClass){
    print("# 抽象类:");
}else if(isNotEmpty(prop.annotationClass) && prop.annotationClass){
    print("# 注解类型:");
}else if(isNotEmpty(prop.enumClass) && prop.enumClass){
    print("# 枚举类型:");
}else{
    print("# 类名称:");
}
%>
${prop.className!}

## 基本信息

* **全路径信息:** ${prop.fullClassName!}
* **${i18n.childfile.packageName!}:** ${prop.packageName!}
* **${i18n.childfile.projectName!}:** ${prop.projectName!}
* **${i18n.childfile.moduleName!}:** ${prop.moduleName!}

${docClassFn.calCommentTagsMd(prop,"TYPEPARAM","* **类型参数描述：** ")}


${docClassFn.calCommentTagsMd(prop,"AUTHOR","* **作者：** ")}
${docClassFn.calAllClassesMd(prop.allSupperClasses,"* **所有父类：**  \n")}
${docClassFn.calAllClassesMd(prop.allInterfaceClasses,"* **所有父级接口：**  \n")}
${docClassFn.calAllClassesMd(prop.allSubClasses,"* **所有子类：**  \n")}
${docClassFn.calAllClassesMd(prop.allSubInterfaceClasses,"* **所有子接口：**  \n")}
---

### 声明信息
> ${docClassFn.calClassNameStructure(prop)}


${docClassFn.calCommentMd(prop,"* **描述：** ")}

<% if(isNotEmpty(prop.fields)){
    println("## 成员变量汇总");
    println("");
    println("|   索引  |   修饰符  |    类型简称  |   字段与描述   |   初始值   |");
    println("| ---- | ---- | ---- | ---- | ---- |");
    for(fieldsObj in prop.fields){
        print("|");
        print(fieldsObjLP.index);
        print("|");
        print(docClassFn.calModifer(fieldsObj.modifiers));
        print("|");
        print(docClassFn.createClassNameLinkMd(fieldsObj.type));
        print("|");
        print(memberFn.createInnerLinkIdMd(fieldsObj.name,"",fieldsObj.name));print("<br/>");
        print(docClassFn.calCommentNoEnterMd(fieldsObj));
        print("|");
         if(isNotEmpty(fieldsObj.initializer)){
           print(fieldsObj.initializer);
         }else{
           print("无");
         }
        println("|");
      }
    }
%>
<% if(isNotEmpty(prop.allSupperClassDetailProp)){
    for(allSupperClassObj in prop.allSupperClassDetailProp){
        if(isNotEmpty(allSupperClassObj.fields)){
            println("---");
            print("### ");print(allSupperClassObjLP.index);print(".继承类的所有成员变量:");println(docClassFn.calLinkClassNameMd(allSupperClassObj));
            println(docClassFn.calAllClassesDetailFieldMd(allSupperClassObj.fields,"",allSupperClassObj.dependencyRelativePath));
        }
      }
    }
%>


<% if(isNotEmpty(prop.allInterfaceClassDetailProp)){
    for(allSupperInterfaceClassObj in prop.allInterfaceClassDetailProp){
        if(isNotEmpty(allSupperInterfaceClassObj.fields)){
            println("---");
            print("### ");print(allSupperInterfaceClassObjLP.index);print(".继承接口的所有成员变量:");println(docClassFn.calLinkClassNameMd(allSupperInterfaceClassObj));
            println(docClassFn.calAllClassesDetailFieldMd(allSupperInterfaceClassObj.fields,"",allSupperInterfaceClassObj.dependencyRelativePath));
        }
      }
    }
%>


<% if(isNotEmpty(prop.constructors)){
    println("## 构造方法汇总");
    println("");
    println("|   索引  |    方法体和描述   |");
    println("| ---- | ---- |");
    for(methodObj in prop.constructors){
        print("|");
        print(methodObjLP.index);
         print("|");
         print(memberFn.calMethodStructureInnerLinkMd(methodObj,""));
         print("<br/>");
         print(docClassFn.calCommentNoEnterMd(methodObj));
        println("|");

      }
    }
%>

<% if(isNotEmpty(prop.methods)){
    println("## 方法汇总");
    println("");
    println("|   索引  |    方法体和描述   |");
    println("| ---- | ---- |");
    for(methodObj in prop.methods){
        print("|");
        print(methodObjLP.index);
         print("|");
         print(memberFn.calMethodStructureInnerLinkMd(methodObj,""));
         print("<br/>");
        print(docClassFn.calCommentNoEnterMd(methodObj));
        println("|");

      }
    }
%>


<% if(isNotEmpty(prop.allSupperClassDetailProp)){
    for(allSupperClassObj in prop.allSupperClassDetailProp){
        println("---");
        print("### ");print(allSupperClassObjLP.index);print(".继承类方法:");println(docClassFn.createClassNameLinkMd(allSupperClassObj));
        println();print("全路径信息");println(docClassFn.calLinkClassNameMd(allSupperClassObj));
        println(docClassFn.calAllClassesDetailMethodMd(allSupperClassObj.methods,"",allSupperClassObj.dependencyRelativePath));
      }
    }
%>


<% if(isNotEmpty(prop.allInterfaceClassDetailProp)){
    for(allSupperInterfaceClassObj in prop.allInterfaceClassDetailProp){
        println("---");
        print("### ");print(allSupperInterfaceClassObjLP.index);print(".继承接口方法:");println(docClassFn.createClassNameLinkMd(allSupperInterfaceClassObj));
        println();print("全路径信息");println(docClassFn.calLinkClassNameMd(allSupperInterfaceClassObj));
        println(docClassFn.calAllClassesDetailMethodMd(allSupperInterfaceClassObj.methods,"",allSupperInterfaceClassObj.dependencyRelativePath));
      }
    }
%>

<% if(isNotEmpty(prop.fields)){
    println("## 成员变量详细信息");
    println("");
    for(fieldsObj in prop.fields){
        println("---");
        print("> **");print(fieldsObjLP.index);print(".");print(memberFn.createHrefIdHtml(fieldsObj.name,"",fieldsObj.name));println("**");
        println();
        print("* **签名信息：** ");
        println();
        println();
        print("  ");println(docClassFn.calFieldStructureMd(fieldsObj));
        println();
        println();
        println(docClassFn.calCommentMd(fieldsObj,"* **描述：** "));

      }
    }
%>


<% if(isNotEmpty(prop.constructors)){
    println("## 构造方法详细信息");
    println("");

    for(methodObj in prop.constructors){
        println("---");
        print("> **");print(methodObjLP.index);print(".");print(memberFn.createHrefIdHtml(methodObj.name,"",memberFn.calUniqueMethodName(methodObj)));println("**");
        println();
        print("* **构造方法签名：** ");
        println();
        println();
        print("  ");println(memberFn.calMethodStructureMd(methodObj));
        println();
        println();

        println(docClassFn.calCommentMd(methodObj,"* **描述：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"PARAM","* **参数描述：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"THROWS","* **异常信息：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"SINCE","* **来源版本：** "));

      }
    }
%>

<% if(isNotEmpty(prop.methods)){
    println("## 方法详细信息");
    println("");

    for(methodObj in prop.methods){
        println("---");
        print("> **");print(methodObjLP.index);print(".");print(memberFn.createHrefIdHtml(methodObj.name,"",memberFn.calUniqueMethodName(methodObj)));println("**");
        println();
        print("* **方法签名：** ");
        println();
        println();
        print("  ");println(memberFn.calMethodStructureMd(methodObj));
        println();
        println();
        println(docClassFn.calCommentMd(methodObj,"* **描述：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"PARAM","* **参数描述：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"RETURN","* **返回值描述：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"THROWS","* **异常信息：** "));
        println(docClassFn.calCommentTagsMd(methodObj,"SINCE","* **来源版本：** "));
      }
    }
%>